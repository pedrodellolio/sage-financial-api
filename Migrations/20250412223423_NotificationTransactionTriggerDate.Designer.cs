// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SageFinancialAPI.Data;

#nullable disable

namespace SageFinancialAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250412223423_NotificationTransactionTriggerDate")]
    partial class NotificationTransactionTriggerDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SageFinancialAPI.Entities.Budget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.BudgetGoal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BudgetId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("LabelId");

                    b.ToTable("BudgetGoals");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ColorHex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("TriggerDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Title")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Frequency")
                        .HasColumnType("integer");

                    b.Property<int>("Installment")
                        .HasColumnType("integer");

                    b.Property<decimal>("InterestPercentage")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("LabelId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("NotificationId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ParentTransactionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalInstallments")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValueBrl")
                        .HasColumnType("numeric");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("LabelId");

                    b.HasIndex("ParentTransactionId");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PushNotificationsToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ExpensesBrl")
                        .HasColumnType("numeric");

                    b.Property<decimal>("IncomesBrl")
                        .HasColumnType("numeric");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("UserId");

                    b.HasIndex("Month", "Year", "ProfileId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.Budget", b =>
                {
                    b.HasOne("SageFinancialAPI.Entities.Profile", "Profile")
                        .WithMany("Budgets")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.BudgetGoal", b =>
                {
                    b.HasOne("SageFinancialAPI.Entities.Budget", "Budget")
                        .WithMany("BudgetGoals")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SageFinancialAPI.Entities.Label", "Label")
                        .WithMany("BudgetGoals")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Budget");

                    b.Navigation("Label");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.File", b =>
                {
                    b.HasOne("SageFinancialAPI.Entities.Profile", "Profile")
                        .WithMany("Files")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.Label", b =>
                {
                    b.HasOne("SageFinancialAPI.Entities.Profile", "Profile")
                        .WithMany("Labels")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.Notification", b =>
                {
                    b.HasOne("SageFinancialAPI.Entities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SageFinancialAPI.Entities.Transaction", "Transaction")
                        .WithOne("Notification")
                        .HasForeignKey("SageFinancialAPI.Entities.Notification", "TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.Profile", b =>
                {
                    b.HasOne("SageFinancialAPI.Entities.User", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.Transaction", b =>
                {
                    b.HasOne("SageFinancialAPI.Entities.File", "File")
                        .WithMany("Transactions")
                        .HasForeignKey("FileId");

                    b.HasOne("SageFinancialAPI.Entities.Label", "Label")
                        .WithMany("Transactions")
                        .HasForeignKey("LabelId");

                    b.HasOne("SageFinancialAPI.Entities.Transaction", "ParentTransaction")
                        .WithMany()
                        .HasForeignKey("ParentTransactionId");

                    b.HasOne("SageFinancialAPI.Entities.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Label");

                    b.Navigation("ParentTransaction");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.Wallet", b =>
                {
                    b.HasOne("SageFinancialAPI.Entities.Profile", "Profile")
                        .WithMany("Wallets")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SageFinancialAPI.Entities.User", null)
                        .WithMany("Wallets")
                        .HasForeignKey("UserId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.Budget", b =>
                {
                    b.Navigation("BudgetGoals");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.File", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.Label", b =>
                {
                    b.Navigation("BudgetGoals");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.Profile", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("Files");

                    b.Navigation("Labels");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.Transaction", b =>
                {
                    b.Navigation("Notification");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.User", b =>
                {
                    b.Navigation("Profiles");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("SageFinancialAPI.Entities.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
